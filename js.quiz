== JS for server quiz
[Basic JS]
This is the statement for problem group one.
At ||LINK: https://www.w3schools.com/js/default.asp||

Which js statement are true
||CODE:java:
var x, y, z; //A
||
||CODE:java:
x = 5; //B
||
||CODE:java:
y = 6; //C
||
||CODE:java:
z = x+y; //D
||
||CODE:java:
x*y = 5; //E
||
*= A
*= B
*= C
*= D
* E:: wtf is this

Which are true:
||CODE:java:
var person = "Hege";
var person="Hege"; // A
||
||CODE:java:
function myFunction() { //B
  document.getElementById("demo1").innerHTML = "Hello Dolly!";
  document.getElementById("demo2").innerHTML = "How are you?";
}
||
||CODE:java:
//The variables lastName and lastname, are two different variables:
var lastname, lastName; //C
lastName = "Doe";
lastname = "Peterson";
||
*= Semicolons separate JavaScript statements.
*= When separated by semicolons, multiple statements on one line are allowed:
*= Both statements in A are equivalent. JS ignores spaces.
*= B is how to define a function.
* You can't have a function return value in JS.
* JS is a strong type language.
*= Code after double slashes // or between /* and */ is treated as a comment.
*= In JavaScript, the first character must be a letter, or an underscore (_), or a dollar sign ($).
*= C is true.
*= The "equal to" operator is written like == in JavaScript.

The general rules for constructing names for variables:
*= Names can contain letters, digits, underscores, and dollar signs.
*= Names must begin with a letter
*= Names can also begin with $ and _ (but we will not use it in this tutorial)
*= Names are case sensitive (y and Y are different variables)
*= Reserved words (like JavaScript keywords) cannot be used as names
* Name can only start with number.
* Name can only start with special character.

Which are true about JavaScript Data Types:
||CODE:java:
var person = "John Doe", carName = "Volvo", price = 200; //A
||
*= Strings are written inside double or single quotes. Numbers are written without quotes.
*= If you put a number in quotes, it will be treated as a text string.
* JS is a strong type language.
* There is no primitive data type in JS. :: Haha the best BS statement
*= A is true to declare many variables in one statement.
*= A variable declared without a value will have the value undefined.
*= If you re-declare a JavaScript variable, it will not lose its value.

Which are true about arithmetic with JavaScript variables:
||CODE:java:
var x = "John" + " " + "Doe"; //A
||
||CODE:java:
var x = 5 + 2 + 3;//B
||
||CODE:java:
var x = "5" + 2 + 3;//C
||
*= A is true.
*= B is true.
* C is wrong since can't add a string with an integer.
* C result is an integer value 55.
*= C output is 523.

What are true about JavaScript Operators
*= The exponentiation operator (**) raises the first operand to the power of the second operand.  produces the same result as Math.pow(x,y). Introduced in ES2016.
* The exponentiation operator (**) is stable and should be use on any browser.
* '**' operator is not valid in JS.
*= The + operator can also be used to add (concatenate) strings.
*= adding a number and a string will return a string.
*= '===' mean equal value and equal type
*= typeof returns the type of a variable.
*= instanceof returns true if an object is an instance of an object type.
* You must implement an api to add a string since anything with js is an object.
*= The numbers (in an arithmetic operation) are called operands.
*= The operation (to be performed between the two operands) is defined by an operator.
*= Operator precedence describes the order in which operations are performed in an arithmetic expression.

Which are true about JavaScript Data Types:
||CODE:java:
// A
var length = 16;                               // Number
var lastName = "Johnson";                      // String
var x = {firstName:"John", lastName:"Doe"};    // Object
||
||CODE:java:
// B
var cars = ["Saab", "Volvo", "BMW"];
||
||CODE:java:
// C
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
||
*= A is true. JavaScript variables can hold many data types: numbers, strings, objects and more.
*= When adding a number and a string, JavaScript will treat the number as a string.
*= JavaScript has dynamic types. This means that the same variable can be used to hold different data types.
*= You can use quotes inside a string, as long as they don't match the quotes surrounding the string.
* You can't use quotes inside a string
*= B  declares (creates) an array called cars, containing three items (car names)
*= JavaScript objects are written with curly braces {}. Object properties are written as name:value pairs, separated by commas like C.
* JS object require a class
*= The typeof operator returns the type of a variable or an expression.
*= In JavaScript, a variable without a value, has the value undefined. The type is also undefined.
* In JavaScript, a variable without a value, has the value null. The type is also null.
*= An empty string has both a legal value and a type.
*= the data type of null is an object. You can also empty an object by setting it to undefined

Difference Between Undefined and Null?
||CODE:java:
typeof undefined           // undefined A
typeof null                // object  B
null === undefined         // false  C
null == undefined          // true   D
||
*= undefined and null are equal in value but different in type
*= ABCD is true.
* A is wrong rest are true
* B is wrong rest are true
* CD are wrong rest are true

What are true about JS Data
||CODE:java:
typeof {name:'John', age:34} // Returns "object" //A
typeof [1,2,3,4]             // Returns "object"  //B
typeof null                  // Returns "object" //C
typeof function myFunc(){}   // Returns "function" //D
||
*= 4 types: string number boolean undefined
* 4 types: string integer boolean undefined
* 5 types: string integer float boolean undefined
*= typeof operator can return one of two complex types: function object
*= ABCD are true
* B is wrong since it must B array.

What are true about function:
||CODE:java:
//A
function name(parameter1, parameter2, parameter3) {
  // code to be executed
}
||
*= A defince a function with the function keyword, followed by a name, followed by parentheses ().
*= A function will be called When an event occurs (when a user clicks a button),When it is invoked (called) from JavaScript code,Automatically (self invoked)
* A function in JS always is void type.
*= The () Operator Invokes the Function. Accessing a function without () will return the function definition instead of the function result.
* Accessing a function without () will return an error from compiler.
*= Variables declared within a JavaScript function, become LOCAL to the function.

What are true about object
||CODE:java:
//A
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
||
||CODE:java:
//B
objectName.propertyName
//or
objectName["propertyName"] //B2
||
||CODE:java:
//C
var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
||
||CODE:java:
//D
objectName.methodName();
||
*= You define (and create) a JavaScript object with an object literal like A.
*= The name:values pairs in JavaScript objects are called properties
*= You can access object properties in two ways like B
* B2 is wrong because it is how to access array
*= Objects can also have methods. Methods are actions that can be performed on objects like C.
*= Access to function like D
* D is wrong because it is not clear. You can access array the same way.
*= When a JavaScript variable is declared with the keyword "new", the variable is created as an object
*= Comparing two JavaScript objects will always return false.

What are true about js string
*= You can use single or double quotes
*= To find the length of a string, use the built-in length property
* To find the length of a string, use the built-in length() function
* To find the length of a string, use the built-in size property

Which character need Escape Character:
*= '
*= "
*= \
* None of the mentioned.

Which are valid escape in JS:
*= \b	Backspace
*= \f	Form Feed
*= \n	New Line
*= \r	Carriage Return
*= \t	Horizontal Tabulator
*= \v	Vertical Tabulator
* \d Delete
* \t Tranfer
* \e escape

Give you this
||CODE:java:
var x = "John";
var y = new String("John");
||
*= (x === y) is false because x and y have different types (string and object)
*= (x == y) is true because x and y have equal values
* (x === y) is true because js auto cast value.
* (x == y) is false because js not auto get value from an object.

What are true about string method
||CODE:java:
//A
var str = "Please locate where 'locate' occurs!";
var pos = str.indexOf("locate");
||
||CODE:java:
//B
str = "Please visit Microsoft!";
var n = str.replace(/MICROSOFT/i, "W3Schools");
||
||CODE:java:
//C
str = "Please visit Microsoft and Microsoft!";
var n = str.replace(/Microsoft/g, "W3Schools");
||
||CODE:java:
//D
var txt = "Hello";       // String
txt.split("");           // Split in characters
||
*= The length property returns the length of a string
*= indexOf() method returns the index of (the position of) the first occurrence of a specified text in a string like A
*= The search() method searches a string for a specified value and returns the position of the match
* search() and indexOf() are equal
*= The search() method cannot take a second start position argument but can take regex.
*= The replace() method replaces a specified value with another value in a string:
* By default, the replace() method replaces all matches
*= By default, the replace() method is case sensitive
*= To replace case insensitive, use a regular expression with an /i flag (insensitive) like B
*= To replace all matches, use a regular expression with a /g flag like C
*= All string methods return a new string. They don't modify the original string.
* Strings are mutable
*= The trim() method removes whitespace from both sides of a string
* charAt(0) and str[0] are perfectly the same ::Property access might be a little unpredictable: It does not work in Internet Explorer 7 or earlier,It makes strings look like arrays (but they are not),If no character is found, [ ] returns undefined, while charAt() returns an empty string. It is read only. str[0] = "A" gives no error (but does not work!)
*= A string can be converted to an array with the split() method like D

What are true about js number
||CODE:java:
//A
var x = "100";
var y = "10";
var z = x * y;       // z will be 1000
||
||CODE:java:
//B
var x = "100";
var y = "10";
var z = x + y;
||
*= JavaScript Numbers are Always 64-bit Floating Point
* JavaScript strings can't have numeric content
* A is wrong since can't multiply string
* B result is 110 :: it add 2 string so will be 10010
*= NaN is a JavaScript reserved word indicating that a number is not a legal number.
*= You can use the global JavaScript function isNaN() to find out if a value is a number
*= JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.

What are true about string method
||CODE:java:
//A
var x = 9.656;
x.toFixed(0);           // returns 10
x.toFixed(2);           // returns 9.66
x.toFixed(4);           // returns 9.6560
x.toFixed(6);           // returns 9.656000
||
||CODE:java:
//B
 var x = 9.656;
x.toPrecision();        // returns 9.656
x.toPrecision(2);       // returns 9.7
x.toPrecision(4);       // returns 9.656
x.toPrecision(6);       // returns 9.65600 
||
||CODE:java:
//C
 var x = 123;
x.valueOf();            // returns 123 from variable x
(123).valueOf();        // returns 123 from literal 123
(100 + 23).valueOf();   // returns 123 from expression 100 + 23
||
*= The toString() method returns a number as a string.
*= toFixed() returns a string, with the number written with a specified number of decimals like A
*= toPrecision() returns a string, with a number written with a specified length like B
*= valueOf() returns a number as a number like D.
* String to int and vice versa require a like C++
* Due to immutable, string and int need to create a seperate variables to cast

||CODE:java:
Number("10,33");
||
return?
*= returns NaN
* return 10
* return 33
* return null
* return undefined

||CODE:java:
Number("10 33");
||
return?
*= returns NaN
* return 10
* return 33
* return null
* return undefined

The Number() method on date return
*= the number of milliseconds since 1.1.1970. 
* undefined
* null
* year
* date

||CODE:java:
parseInt("10 years");   // A
parseInt("years 10");   // B
||
*= A: 10 , b: NaN
* A: 10 year, b: 10
* A: 10 , b: years
* A: NaN, b: NaN

Access the Elements of an Array
||CODE:java:
//A
var name = cars[0];
||
*= You access an array element by referring to the index number like A.
* You access an array element by function get().
* You access an array element by function fetch(index).
* You access an array element by function get(index).

Waht are true about js array
||CODE:java:
//A
 var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.length;   // the length of fruits is 4
|| 
*=The length property of an array returns the length of an array (the number of array elements) like A
*= The length property is always one more than the highest array index
* The length property is always equal with the highest array index
* The length is maximum 60
*= A is also how to create array

What are true about array?
||CODE:java:
//A
var last = fruits[fruits.length - 1];
||
||CODE:java:
//B
var fruits, text, fLen, i;
fruits = ["Banana", "Orange", "Apple", "Mango"];
fLen = fruits.length;
for (i = 0; i < fLen; i++) {
  console.log (fruits[i]);
}
||
||CODE:java:
//C
var fruits, text;
fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.forEach(myFunction);
function myFunction(value) {
   console.log({value});
}
//D
fruits.push("Lemon"); 
//===================
var points = new Array();     // E
var points = [];              // F
//===================
Array.isArray(fruits);   // G
fruits.isArray;   // H
//===================
function isArray(x) { //I
  return x.constructor.toString().indexOf("Array") > -1;
}
//===================
var fruits = ["Banana", "Orange", "Apple", "Mango"]; //K
fruits instanceof Array;   // returns true  
|| 
*= Arrays are a special type of objects. The typeof operator in JavaScript returns "object" for arrays.
* A is wrong, last must be access by keyword fruits.last; :: lol A is true
* B and C are perfectly equivalent
*= B and C are  kind of equivalent when loop through an array. :: yes A return string meanwhile B return an object.
*= D is how to add a new element to an array
*= Arrays with named indexes are called associative arrays (or hashes).
* JavaScript does support arrays with named indexes.
*= In JavaScript, objects use named indexes.
*= E is bad, F is good practice.
* E and F are both wrong since JS not support empty array.
*= To detect an array, G is true and H is wrong.
* To detect an array, H is true and G is wrong.
*= for older browser not support ES5 you can use I or K function.

What are true about JS array?
||CODE:java:
//A
var fruits = ["Banana", "Orange", "Apple", "Mango"];
console.log (fruits.toString());
//===============
//B
var fruits = ["Banana", "Orange", "Apple", "Mango"];
console.log(fruits.join(" * "));
//===============
//C
 var fruits = ["Banana", "Orange", "Apple", "Mango"];
var x = fruits.pop();      // the value of x is "Mango" 
//===============
//D
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var x = fruits.push("Kiwi");   //  the value of x is 5 
//===============
//E
 var fruits = ["Banana", "Orange", "Apple", "Mango"];
var x = fruits.shift();    // the value of x is "Banana" 
//===============
//F
 var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");    // Returns ? //G
//===============
//H
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
//I
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(0, 1);
//K
var myGirls = ["Cecilie", "Lone"];
var myBoys = ["Emil", "Tobias", "Linus"];
var myChildren = myGirls.concat(myBoys);   // Concatenates (joins) myGirls and myBoys
//L
var arr1 = ["Cecilie", "Lone"];
var arr2 = ["Emil", "Tobias", "Linus"];
var arr3 = ["Robin", "Morgan"];
var myChildren = arr1.concat(arr2, arr3);   // Concatenates arr1 with arr2 and arr3   
||
*=  JavaScript method toString() converts an array to a string of (comma separated) array values like A.
* A will get an error since JavaScript not support toString() method on an array.
*= The join() method also joins all array elements into a string. It behaves just like toString(), but in addition you can specify the separator like B
* The pop() method just removes the last element from an array
*= The pop() method removes the last element from an array and returns the value that was "popped out" like C
* The push() method adds a new element to an array (at the top) and returns the new array length like D.
*= The push() method adds a new element to an array (at the end) and returns the new array length like D.
*= The shift() method removes the first array element and "shifts" all other elements to a lower index, returns the string that was "shifted out" like E
* The shift() method removes the last array element and "shifts" all other elements to a lower index, returns the string that was "shifted out" like E
* The shift() method shift right, returns the string that was "shifted out" like E
*= The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements like F. 
* G return "Lemon"
*= G return 5 :: yes unshift() return size of the new array.
*= Using delete may leave undefined holes in the array. Use pop() or shift() instead.
*= Array elements are accessed using their index number like this ||CODE:java: fruits[0] = "Kiwi"; ||   
*= elements can be deleted by using the JavaScript operator delete ||CODE:java: delete fruits[0];  // Changes the first element in fruits to undefined  || 
*= The splice() method can be used to add new items to an array. The first parameter (2) defines the position where new elements should be added (spliced in). The second parameter (0) defines how many elements should be removed like H.       
* The splice() method returns size of array with the deleted items :: The splice() method returns an array with the deleted items.
*= I  Removes the first element of fruits.
* I add an undefined element to fruits.
*= concat() method creates a new array by merging (concatenating) existing arrays like K.
* The concat() method change the existing arrays. :: The concat() method does not change the existing arrays. It always returns a new array.
*= The concat() method can take any number of array arguments like L.

What are true about JavaScript array?
||CODE:java:
//A
var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(1, 3);
//B
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort(); 
//C
fruits.reverse(); 
//D
arrayX = [25,100];
arrayX.sort();
//E
var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});
//F
var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return 0.5 - Math.random()});
//G
function myArrayMax(arr) {
  return Math.max.apply(null, arr);
}
//H
function myArrayMin(arr) {
  return Math.min.apply(null, arr);
}
//I
var cars = [
  {type:"Volvo", year:2016},
  {type:"Saab", year:2001},
  {type:"BMW", year:2010}
]; 
cars.sort(function(a, b){return a.year - b.year});
//K
var txt = "";
var numbers = [45, 4, 9, 16, 25];
numbers.forEach(myFunction);
function myFunction(value, index, array) {
  console.log(value);
}
//L
var numbers1 = [45, 4, 9, 16, 25];
var numbers2 = numbers1.map(myFunction);
console.log(numbers2);
console.log(numbers1);
function myFunction(value, index, array) {
  return value * 2;
}
//M
var numbers = [45, 4, 9, 16, 25];
var over18 = numbers.filter(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}
//N
var numbers1 = [45, 4, 9, 16, 25];
var sum = numbers1.reduce(myFunction);
function myFunction(total, value, index, array) {
  return total + value;
} 
//O
var numbers = [45, 4, 9, 16, 25];
var allOver18 = numbers.every(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}
//P
var numbers = [45, 4, 9, 16, 25];
var someOver18 = numbers.some(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}
//Q
var fruits = ["Apple", "Orange", "Apple", "Mango"];
var a = fruits.indexOf("Apple");
//R
var numbers = [4, 9, 16, 25, 29];
var first = numbers.find(myFunction);
function myFunction(value, index, array) {
  return value > 18;
} 
//S
var numbers = [4, 9, 16, 25, 29];
var first = numbers.findIndex(myFunction);
function myFunction(value, index, array) {
  return value > 18;
} 
||
*= The slice() method slices out a piece of an array into a new array.
* The slice() method edit on the array itself ::The slice() method creates a new array. It does not remove any elements from the source array.
*= A return Orange,Lemon :: The method then selects elements from the start argument, and up to (but not including) the end argument.
* A return Orange,Lemon, Apple :: The method then selects elements from the start argument, and up to (but not including) the end argument.
*= All JavaScript objects have a toString() method.
*= The sort() method sorts an array alphabetically like B
*= The reverse() method reverses the elements in an array like C
*= By default, the sort() function sorts values as strings.
* D will return 25,100; :: By default, the sort() function sorts values as strings.
*= To sort an numeric array you must write a compare function like E. If the result is negative a is sorted before b. If the result is positive b is sorted before a.
*= F is to shuffle an array
* F is to order the array alphabetically.
*= G is to find max value in array
*= H is to find max value in array
* I will have an error because we can't compare anything except primitive value in javascript. :: lol
*= The forEach() method calls a function (a callback function) once for each array element like K
*= The map() method creates a new array by performing a function on each array element like L.
* forEach() and map() are equal and can be replace each other. :: forEach() doesn't return anything
*= The filter() method creates a new array with array elements that passes a test like M.
*= The reduce() method runs a function on each array element to produce (reduce it to) a single value like N.
* The reduce() method works from right-to-left in the array :: The reduce() method works from left-to-right in the array. Array.reduceRight() right to left
* The reduce() method  reduce the original array. :: The reduce() method does not reduce the original array.
*= The every() method check if all array values pass a test like O
*= The some() method check if some array values pass a test like P.
* P is true.
*= The indexOf() method searches an array for an element value and returns its position like Q.
* Q return 3.
* Array.indexOf() returns 0 if the item is not found. :: Array.indexOf() returns -1 if the item is not found.
*= Array.lastIndexOf() is the same as Array.indexOf(), but returns the position of the last occurrence of the specified element.
*= The find() method returns the value of the first array element that passes a test function like R
*= The findIndex() method returns the index of the first array element that passes a test function like S.
* S return 2

What are true about javascript?
||CODE:java:
//A
function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min) ) + min;
}
//B
if (condition1) {
  //  block of code to be executed if condition1 is true
} else if (condition2) {
  //  block of code to be executed if the condition1 is false and condition2 is true
} else {
  //  block of code to be executed if the condition1 is false and condition2 is false
}
//C
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}
//D
switch (new Date().getDay()) {
  case 4:
  case 5:
    text = "Soon it is Weekend";
    break;
  case 0:
  case 6:
    text = "It is Weekend";
    break;
  default:
    text = "Looking forward to the Weekend";
}
//E
for (statement 1; statement 2; statement 3) {
  // code block to be executed
}
//F
var person = {fname:"John", lname:"Doe", age:25};
var text = "";
var x;
for (x in person) {
  text += person[x];
}
//G
var cars = ['BMW', 'Volvo', 'Mini'];
var x;
for (x of cars) {
  console.log(x);
} 
//H
while (condition) {
  // code block to be executed
} 
||
*= Math.random() always returns a number lower than 1.
* JavaScript had a predefined function to generate random from min or max :: wrong you must write it like A.
*= Everything Without a "Value" is False.
* The Boolean value of -0 (minus zero) is true.
* The Boolean value of NaN is true;
*= if else syntax like B.
*= switch syntax  like C.
* switch break is optional, don't affect code logic. :: If you omit the break statement, the next case will be executed even if the evaluation does not match the case.
*= The default keyword specifies the code to run if there is no case match
* The default case have to be the last case in a switch block :: The default case does not have to be the last case in a switch block.
* D will have compiler error due to don't have break in 4,5 0,6. :: case 4 and 5 share the same code block, and 0 and 6 share another code block.
* If multiple cases matches a case value, the last case is selected. :: If multiple cases matches a case value, the first case is selected.
*= If no default label is found, the program continues to the statement(s) after the switch.
* Switch cases use value comparison == ::Switch cases use strict comparison (===).
*= In E, Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block.Statement 3 is executed (every time) after the code block has been executed.
* In E, Statement 1 is executed everytime before the execution of the code block. Statement 2 defines the condition for executing the code block.Statement 3 is executed (every time) after the code block has been executed.
* Statement 1 in E is a must. :: Statement 1 is optional.
* Statement 2 in E is a must. :: Statement 2 is optional. If you omit statement 2, you must provide a break inside the loop. Otherwise the loop will never end.
*= JavaScript for/in statement loops through the properties of an object like F
*= The JavaScript for/of statement loops through the values of an iterable objects. for/of lets you loop over data structures that are iterable such as Arrays, Strings, Maps, NodeLists, and more. Eg: G.
*= The while loop loops through a block of code as long as a specified condition is true like H
*= The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.
*=  while loop is much the same as a for loop, with statement 1 and statement 3 omitted.
*= The break statement "jumps out" of a loop.
*= The continue statement "jumps over" one iteration in the loop.

What are true about javascript?
||CODE:java:
//A
typeof new Date();
//B
function isDate(myDate) {
  return myDate.constructor.toString().indexOf("Date") > -1;
}
//C
 var y = "5";      // y is a string
var x = + y;      // x is a ?
//D
Number(false)     // returns 0
Number(true)      // returns 1 
//E
try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
} 
finally {
  Block of code to be executed regardless of the try / catch result
} 
//F
x = 5; // Assign 5 to x
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x;                     // Display x in the element
var x; // Declare x
//G
var x = 5; // Initialize x
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x + " " + y;           // Display x and y
var y = 7; // Initialize y 
||
*= 6 type of objects : Object,Date,Array,String,Number,Boolean.
* 6 type of data type: Object,Date,Array,String,Number,Boolean.
* Only undefined cannot contain value. :: 2 data types that cannot contain values: null,undefined 
* A return Date. :: A return Object
*= The constructor property returns the constructor function for all JavaScript variables. You can check the constructor property to find out if an object is a Date like B
*= parseFloat() 	Parses a string and returns a floating point number
*= parseInt() 	Parses a string and returns an integer
* x is a string :: The unary + operator can be used to convert a variable to a number, x is a number. If the variable cannot be converted, it will still become a number, but with the value NaN (Not a Number).
* method Number() can also convert booleans to numbers like D.
*= The try statement allows you to define a block of code to be tested for errors while it is being executed.The catch statement allows you to define a block of code to be executed, if an error occurs in the try block like E. 
*= If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable. Global variables are not created automatically in "Strict Mode".
* In a web browser, global variables are deleted when you close the browser window (or tab), but remain available to new pages loaded into the same window.
*= Hoisting is JavaScript's default behavior of moving declarations to the top. like F
* In G, due to Hoisting, y = 7; :: JavaScript only hoists declarations, not initializations.
*= To avoid bugs, always declare all variables at the beginning of every scope.
*= Strict mode is declared by adding "use strict"; to the beginning of a script or a function. 
*= The this keyword refers to the object that called the function. If the object is not specified, functions in strict mode will return undefined and functions in normal mode will return the global object (window).

What are true about javascript?
*= In a method, this refers to the owner object.
* In a function, this refers to null. :: In a function, this refers to the global object.
*= In an event, this refers to the element that received the event.






[JS Fat arrow]
This is the statement for problem group one.
At ||LINK: https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/||

What Are Arrow Functions?
||CODE:java:
// (param1, param2, paramN) => expression
// ES5 A
var multiplyES5 = function(x, y) {
  return x * y;
};
// ES6 B
const multiplyES6 = (x, y) => { return x * y };
//C
const multiplyES6 = (x, y) => x * y;
//D
var phraseSplitterEs5 = function phraseSplitter(phrase) {
  return phrase.split(' ');
};
//ES6
const phraseSplitterEs6 = phrase => phrase.split(" ");
//E
//ES5
var docLogEs5 = function docLog() {
    console.log(document);
};
//ES6
var docLogEs6 = () => { console.log(document); };
docLogEs6(); // #document... <html> ….
||
*= Arrow functions – also called “fat arrow” functions, from CoffeeScript (a transcompiled language) — are a more concise syntax for writing function expressions.
*= They utilize a new token, =>, that looks like a fat arrow. Arrow functions are anonymous and change the way this binds in functions.
*= By using arrow functions, we avoid having to type the function keyword, return keyword (it’s implicit in arrow functions), and curly brackets.
* Fat arrow is a refactor of C++ -> operator when port from
* Fat arrow is a from ES5
* A and B is not equal.
* C is wrong
*= Parentheses are optional when only one parameter is present like D
*= Parentheses are required when no parameters are present like E
* Fat arrow can be used like a normal function, with this for example :: hell no, you can't use this. ||LINK: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions||

Use Cases for Arrow Functions?
* test


This is another problem in this problem group.
* This is a great tutorial!
*= This tutorial can be improved. I'm going to email you with suggestions so you can do a better job.
