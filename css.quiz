== css quiz
[Basic CSS]
This is the statement for problem group one.
At ||LINK: https://www.w3schools.com/css/css_intro.asp||

What are true about CSS
||CODE:css:
p {//A 
  color: red;
  text-align: center;
} 
||
*= CSS stands for Cascading Style Sheets
*= CSS describes how HTML elements are to be displayed on screen, paper, or in other media
*= A CSS rule-set consists of a selector and a declaration block like A
*= A CSS comment starts with /* and ends with */. Comments can also span multiple lines.
* A class name can start with a number! :: A class name cannot start with a number!

What are true about CSS
||CODE:html:
//E
<p class="center large">This paragraph refers to two classes.</p> 
//==============
p { //A
  text-align: center;
  color: red;
}
#para1 { //B
  text-align: center;
  color: red;
}
.center { //C
  text-align: center;
  color: red;
}
p.center { //D
  text-align: center;
  color: red;
} 
//F
\* {
  text-align: center;
  color: blue;
}
//G
h1, h2, p {
  text-align: center;
  color: red;
}
||
*= A mean all <p> elements on the page will be center-aligned, with a red text color. 
* A mean all class name p on the page will be center-aligned, with a red text color. 
* B mean all class name para1 on the page will be center-aligned, with a red text color.
*= B mean all id named para1 on the page will be center-aligned, with a red text color.
*= C mean all class name center on the page will be center-aligned, with a red text color.
* D will give an error due to wrong syntax.
*= D mean all elements p with class name center will be center-aligned, with a red text color.
*= E mean the <p> element will be styled according to class="center" and to class="large": 
*= The universal selector (*) selects all HTML elements on the page.
*= G is The grouping selector selects all the HTML elements with the same style definitions.

What are true about CSS
||CODE:html:
<!DOCTYPE html> //A
<html>
<head>
    <link rel="stylesheet" type="text/css" href="mystyle.css">
</head>
<body>
    <h1>This is a heading</h1>
    <p>This is a paragraph.</p>
</body>
</html>
||
||CODE:html:
<!DOCTYPE html>
<html>
<head>
<style>
body {
  background-color: linen;
}
h1 {
  color: maroon;
  margin-left: 40px;
}
</style>
</head>
<body>
<h1>This is a heading</h1>
<p>This is a paragraph.</p>
</body>
</html>
||
||CODE:html:
<!DOCTYPE html> //B
<html>
<body>
<h1 style="color:blue;text-align:center;">This is a heading</h1>
<p style="color:red;">This is a paragraph.</p>
</body>
</html>
||
||CODE:html:
<head> //C
<link rel="stylesheet" type="text/css" href="mystyle.css">
<style>
h1 {
  color: orange;
}
</style>
</head>
||
*= External styles are defined within the <link> element, inside the <head> section of an HTML page like A
*  Must add a space between the property value and the unit ::  Do not add a space between the property value and the unit. The correct way is: margin-left: 20px;
*= An inline style may be used to apply a unique style for a single element like B
* If some properties have been defined for the same selector (element) in different style sheets, the value from the first read style sheet will be used :: If some properties have been defined for the same selector (element) in different style sheets, the value from the last read style sheet will be used.
* In C, h1 color will be red. :: orange, dude

All the styles in a page will "cascade" into a new "virtual" style sheet by the following rules, where number one has the highest priority:
||CODE::text:
1.Inline style (inside an HTML element)
2.External and internal style sheets (in the head section)
3.Browser default
||
*= The statement is correct.
* The order should be 2 1 3
* The order should be 3 1 2
* The order should be 2 3 1

What are true about CSS?
||CODE:html:
<h1 style="color:Tomato;">Hello World</h1> //A
<h1 style="border:2px solid Tomato;">Hello World</h1> //B
<h1 style="background-color:DodgerBlue;">Hello World</h1> //C
||
*= You can set color like A, border color like B, and background color like C
*= Each parameter (red, green, and blue) defines the intensity of the color between 0 and 255.
* We cannot define gray color in rgb :: Shades of gray are often defined using equal values for all the 3 light sources
*= We can  use #rrggbb where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff as well
*= In CSS, a color can be specified using hue, saturation, and lightness (HSL)
*= Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.
*= Saturation is a percentage value, 0% means a shade of gray, and 100% is the full color.
*= RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color.
*= HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity for a color.
* HSLA is not supported on most modern browser

What are true about CSS?
||CODE:html:
body { //A
  background-color: lightblue; 
}
//B
body {
  background-image: url("paper.gif");
}
//C
body {
  background-image: url("gradient_bg.png");
}
//D
body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
}
//E
body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
}
//F
body {
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
  background-attachment: fixed;
}
//G
body {
  background: #ffffff url("img_tree.png") no-repeat right top;
}
//H
p {
  border: 5px solid red;
}
||
*=The background-color property specifies the background color of an element like A
* The background-image property specifies an image to use as the background of an element like B.By default, the image is stretched so it covers the entire element. :: The background-image property specifies an image to use as the background of an element. By default, the image is repeated so it covers the entire element.
*= By default, the background-image property repeats an image both horizontally and vertically. like C
*= If the image  is repeated only horizontally (background-repeat: repeat-x;), the background will look better
*= Showing the background image only once is also specified by the background-repeat property like D
*= The background-position property is used to specify the position of the background image like E
*= The background-attachment property specifies whether the background image should scroll or be fixed (will not scroll with the rest of the page) like F
*= To shorten the code, it is also possible to specify all the background properties in one single property. This is called a shorthand property like G
* The border property is a shorthand property for the following individual border properties:  border-style (required) border-color :: The border property is a shorthand property for the following individual border properties: border-width border-style (required) border-color   
*= H defined a box with red solid border 5px thick

What are true about CSS?
||CODE:html:
div {//A
  padding: 25px 50px 75px 100px;
}
div { //B 
  padding: 25px 50px 75px;
}
div { //C 
  padding: 25px 50px;
}
div { //D
  padding: 25px;
}
//E
p {
  border: 2px solid red;
  border-radius: 5px;
}
||
*= The CSS margin properties are used to create space around elements, outside of any defined borders.
*=The padding property is a shorthand property for the following individual padding properties: padding-top,padding-right,padding-bottom,padding-left
*= A is padding top 25, padding right 50, padding bottom 75, padding left 100
* A is padding top 25, padding left 50, padding right 75, padding left 100
* B is padding top 25, left 50 , right 75
*= B top padding is 25px ,right and left paddings are 50px,bottom padding is 75px 
*= C top and bottom paddings are 25px right and left paddings are 50px
* C top and left padding are 25 and 50
*= D all four paddings are 25px
* D left padding are 25
*= The border-radius property is used to add rounded borders to an element like E

What are true about CSS
||CODE:html:
//A
div {
  width: 300px;
  padding: 25px;
}
//B
div {
  width: 300px;
  padding: 25px;
  box-sizing: border-box;
}
||
*= The CSS padding properties are used to generate space around an element's content, inside of any defined borders.
*= if an element has a specified width, the padding will be ignored. :: if an element has a specified width, the padding added to that element will be added to the total width of the element.
* width of A will be 300 :: 350
*= box-sizing property causes the element to maintain its width; if you increase the padding, the available content space will decrease. like B
* The height and width properties include padding, borders, or margins :: The height and width properties do not include padding, borders, or margins
*= The value of the max-width property overrides width
* when the browser window is smaller than the width of the element (500px). The browser will not display missing content. :: when the browser window is smaller than the width of the element (500px). The browser then adds a horizontal scrollbar to the page.


The height and width properties may have the following values
*=auto - This is default. The browser calculates the height and width
*=length - Defines the height/width in px, cm etc.
*= % - Defines the height/width in percent of the containing block
*= initial - Sets the height/width to its default value
*= inherit - The height/width will be inherited from its parent value
* override set width/height to the value override parent value
* loop : for all child element follow the style


All the padding properties can have the following values:
*= length - specifies a padding in px, pt, cm, etc.
*= % - specifies a padding in % of the width of the containing element
*= inherit - specifies that the padding should be inherited from the parent element
* enforce padding true or false

||IMG:
https://lh3.googleusercontent.com/xbxVvM6F38GQhNQjXs5CeapNc-TSyemz19wglSUTJm1jgp50pDsWT8W6UErz5VAPPC_V8R7PidAY_-z4jKwgHEC8yvnWYTUPGWgqdJRzbENlZz0V9e91QViKRddUio5fbpiSVUq8B4POx2B-YWc6_ib88L4iq7DjLilVDlt2_djehB2SoMjp3DULwr3K2YfgqqUqn8soqTpLdOXA9DbmzwShcp3hYaAFWvcGGIx4PPj1V8kBINFyYdEij1s_isN1ttxKbFZJ5OV-j4MzLWqRiwpZLeCyFEgYMhu7WMCWbt7EiEyQgxM1gdNgAHnXx8ex0JUWL1-mHtHdV1nfmec-nN-VXPGBWDup2tZH6uMfgmPXYmtRsvtd1u3Z7H2yVAjWIcojKhti4OAxf9c2GBgA6EQLbJdD603U0gjdKaQlbsyyZIxJFJeaVz43OKGHDHyv9vGsamqjQwjBIREu5VqI6aKbH2QmPIZbSQ4SN5YtEYm4hgqcrZfl94x1-h5jfwnrIW06p5E_fktVSSr8ShVUk26sT4hLJnaCm1J_vvF2I_BpG1DSIFo2IaMLOeoSbNk7WTVd0VCNkFOz9v20DywpJ1QmVmCf8Rj2_6tl2vcEM50gaeH0hIJghatSZuhrdyvLdARWRp8SK95TCfMF5M-Y4ANzFz2XaH--JZGoM5APunRgU5phMCbpVmQ=w1308-h397-no||
*= This is box model CSS
* This is element model
* This is a qml model migrated to css


what are true
||CODE:html:
div { //A
  width: 320px;
  padding: 10px;
  border: 5px solid gray;
  margin: 0;
}
||
* div at A will have max width is 350 (320+10*2+5*2)
*= div at A will have current width is 350 (320+10*2+5*2)
*= Total element width = width + left padding + right padding + left border + right border + left margin + right margin
* Total element width = width + left padding + right padding + left margin + right margin
* Total element width = width + left padding + right padding + left border + right border.

What are true
||CODE:html:
//A
h1 {
  text-decoration: overline;
}
h2 {
  text-decoration: line-through;
}
h3 {
  text-decoration: underline;
}
//B
p.uppercase {
  text-transform: uppercase;
}
p.lowercase {
  text-transform: lowercase;
}
p.capitalize {
  text-transform: capitalize;
}
||
*=An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element "stand out".
*= outline property is a shorthand property for setting the following individual outline properties: outline-width, outline-style (required),outline-color
*=The outline-offset property adds space between an outline and the edge/border of an element. The space between an element and its outline is transparent.
* CSS outline is not valid since it not defined inside an element
*= The text-decoration property is used to set or remove decorations from text. like A
*= The text-transform property is used to specify uppercase and lowercase letters in a text like B
*= The text-indent property is used to specify the indentation of the first line of a text
* The letter-spacing property is used to specify the space between the lines in paragraph. :: The letter-spacing property is used to specify the space between the characters in a text.

What are true about CSS
||CODE:html:
p { //A
  font-family: "Times New Roman", Times, serif;
}
//B
body {
  font-size: 100%;
}
h1 {
  font-size: 2.5em;
}
h2 {
  font-size: 1.875em;
}
p {
  font-size: 0.875em;
}
//C
<!DOCTYPE html>
<html>
<head>
<script src="https://kit.fontawesome.com/a076d05399.js"></script>
</head>
<body>
<i class="fas fa-cloud"></i>
<i class="fas fa-heart"></i>
<i class="fas fa-car"></i>
<i class="fas fa-file"></i>
<i class="fas fa-bars"></i>
</body>
</html>
||
*= Serif fonts have small lines at the ends on some characters. "Sans" means without - these fonts do not have the lines at the ends of characters
*= The font-family property should hold several font names as a "fallback" system. If the browser does not support the first font, it tries the next font, and so on. like A
* The font-style property is mostly used to specify italic and bold text :: The font-style property is mostly used to specify italic text.
* The font-size value can be only absolute. :: The font-size value can be an absolute, or relative size. Relative sets the size relative to surrounding elements Allows a user to change the text size in browsers
* 1em is 4px (group pixel) :: 1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px.
*= The solution that works in all browsers, is to set a default font-size in percent for the <body> element like B
* vw stands for very wide, which this font will be cover full width of browser. :: vw unit, which means the "viewport width".That way the text size will follow the size of the browser window.Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.
*= The font-variant property specifies whether or not a text should be displayed in a small-caps font.
* In a small-caps font appears in a smaller font size than the original uppercase letters in the text. :: In a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letters in the text.
* To add icon must manual add image.
*= To add icon you can use fontawesome or bootstrap, google icon like C.

What are true about CSS
*=The four links states are: a:link ,a:visited ,a:hover ,a:active.
*=a:link - a normal, unvisited link
*= a:visited - a link the user has visited
*= a:hover - a link when the user mouses over it
*= a:active - a link contain on focus element :: a link the moment it is clicked
*= a:hover MUST come after a:link and a:visited
* a:active MUST come before a:hover :: a:active MUST come after a:hover

||CODE:html:
a:link, a:visited {
  background-color: #f44336;
  color: white;
  padding: 14px 25px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
}
a:hover, a:active {
  background-color: red;
}
//B
ul.a {
  list-style-type: circle;
}
ul.b {
  list-style-type: square;
}
ol.c {
  list-style-type: upper-roman;
}
ol.d {
  list-style-type: lower-alpha;
}
//C
ul {
  list-style-image: url('sqpurple.gif');
}
||
*= The background color and  the padding make the button like
* We need html code to define a as a button
*= there are two main types of lists: unordered lists (<ul>) ,ordered lists (<ol>)
*= unordered lists (<ul>) - the list items are marked with bullets
*= ordered lists (<ol>) - the list items are marked with numbers or letters
*= The list-style-type property specifies the type of list item marker like B
*= The list-style-image property specifies an image as the list item marker like C
*= "list-style-position: outside;" means that the bullet points will be outside the list item.
* The marker/bullet can't be removed :: The list-style-type:none property can also be used to remove the markers/bullets. Note that the list also has default margin and padding. To remove this, add margin:0 and padding:0 to <ul> or <ol>

What are true
When using the shorthand property, the order of the property values are:
||CODE:text:
//A
1.list-style-type (if a list-style-image is specified, the value of this property will be displayed if the image for some reason cannot be displayed)
2.list-style-position (specifies whether the list-item markers should appear inside or outside the content flow)
3.list-style-image (specifies an image as the list item marker)
||
||CODE:css:
//B
#customers tr:nth-child(even){background-color: #f2f2f2;}
//C
#customers th {
  padding-top: 12px;
  padding-bottom: 12px;
  text-align: left;
  background-color: #4CAF50;
  color: white;
}
//D
table, th, td {
  border: 1px solid black;
}
//E
table {
  border-collapse: collapse;
}
//F
th, td {
  border-bottom: 1px solid #ddd;
}
||
*=list-style property is a shorthand property. It is used to set all the list properties in one declaration
* statement A order is wrong. should be 2 3 1 :: A is true
*= B is used to highlight even row
* C is class customers to highlight :: id not class
*= To specify table borders in CSS, use the border property like D
* E is to add property collapse all data for table :: The border-collapse property sets whether the table borders should be collapsed into a single border
*= To control the space between the border and the content in a table, use the padding property on <td> and <th> elements
*= Add the border-bottom property to <th> and <td> for horizontal dividers like F

What are true
*= Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is block or inline.
*= A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).
*= An inline element does not start on a new line and only takes up as much width as necessary.
*= A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).
* span is a block element :: span, img, a  is inline element
*= display: none;  is used to hide element
* you  can't override the default element display value
* visibility:hidden; is the same as display:none :: visibility:hidden; also hides an element. However, the element will still take up the same space as before
*= Setting the width of a block-level element will prevent it from stretching out to the edges of its container.
* When use max width, when the browser window is smaller than the width of the element. The browser then adds a horizontal scrollbar to the page. :: with width not max width

What are true
||CODE:html:
//A
div.sticky {
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
  background-color: green;
  border: 2px solid #4CAF50;
}
||
*= The position property specifies the type of positioning method used for an element.
* There are four different position values: static,relative,fixed,absolute :: There are 5 different position values: static,relative,fixed,absolute,sticky
*= HTML elements are positioned static by default.
* Static positioned elements are affected by the top, bottom, left, and right properties. :: Static positioned elements are not affected by the top, bottom, left, and right properties.
*= Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.
*= An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
*= A fixed element does not leave a gap in the page where it would normally have been located.
*= An element with position: absolute; is positioned relative to the nearest positioned ancestor
*= if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
* An element with position: sticky; is positioned on the edge. :: An element with position: sticky; is positioned based on the user's scroll position.
*= A is an example to put text in sticky, it need to call webkit for safari support
*= The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).
* An element with smaller stack order is always in front of an element with a lower stack order. :: An element with greater stack order is always in front of an element with a lower stack order.

What are true?
*= The CSS overflow property controls what happens to content that is too big to fit into an area.
*= The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.
*= By default, the overflow is visible, meaning that it is not clipped and it renders outside the element's box:
* With the hidden value, the overflow is clipped, all of the content is hidden :: With the hidden value, the overflow is clipped, and the rest of the content is hidden
* Setting the value to scroll, the overflow is clipped and a scrollbar is added to scroll inside the box. The scrollbar will be add automatically when content too long) :: Setting the value to scroll, the overflow is clipped and a scrollbar is added to scroll inside the box. Note that this will add a scrollbar both horizontally and vertically (even if you do not need it)
*= The auto value is similar to scroll, but it adds scrollbars only when necessary
*=  overflow-x specifies what to do with the left/right edges of the content. overflow-y specifies what to do with the top/bottom edges of the content.

What are true
||CODE:html:
//A
.nav {
  background-color: yellow;
  list-style-type: none;
  text-align: center;
  padding: 0;
  margin: 0;
}
.nav li {
  display: inline-block;
  font-size: 20px;
  padding: 20px;
}
||
*= The float property is used for positioning and formatting content e.g. let an image float left to the text in a container. In its simplest use, the float property can be used to wrap text around images.
*= When clearing floats, you should match the clear to the float: If an element is floated to the left, then you should clear to the left. Your floated element will continue to float, but the cleared element will appear below it on the web page.
* display: inline is another way to call display: inline-block  ::display: inline, the major difference is that display: inline-block allows to set a width and height on the element.
*= with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.
*= Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.
* inline-block is deprecated and not have irl use :: Using inline-block to Create Navigation Links like A

The float property can have one of the following values:
*=left - The element floats to the left of its container
*=right - The element floats to the right of its container
*=none - The element does not float (will be displayed just where it occurs in the text). This is default
*=inherit - The element inherits the float value of its parent
*block - The element block the space of the parent

What are true?
||CODE:html:
img { //A
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 40%;
}
//B
.right {
  position: absolute;
  right: 0px;
  width: 300px;
  border: 3px solid #73AD21;
  padding: 10px;
}
//C
.clearfix {
  overflow: auto;
}
//D
.center {
  padding: 70px 0;
  border: 3px solid green;
}
//E
.center {
  text-align: center;
  border: 3px solid green;
}
//F
.center {
  line-height: 200px;
  height: 200px;
  border: 3px solid green;
  text-align: center;
}
/* If the text has multiple lines, add the following: */
.center p {
  line-height: 1.5;
  display: inline-block;
  vertical-align: middle;
}
//G
.center {
  height: 200px;
  position: relative;
  border: 3px solid green;
}
.center p {
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
||
*= To horizontally center a block element (like <div>), use margin: auto;
* setting the position:fixed element will prevent it stretching  ::Setting the width of the element will prevent it from stretching out to the edges of its container. The element will then take up the specified width, and the remaining space will be split equally between the two margins:
*= To center an image, set left and right margin to auto and make it into a block element like A
*= B is use to align the position of element :: Absolute positioned elements are removed from the normal flow, and can overlap elements.
*=  If an element is taller than the element containing it, and it is floated, it will overflow outside of its container. You can use the "clearfix" hack to fix this like C. to the containing element
*= to center an element vertically in CSS. A simple solution is to use top and bottom padding like D
*= E is to center text horizontally
* F is to center text horizontally
*= G is to center text vertically

Match
||CODE:text:
A.descendant selector.
B.child selector.
C.adjacent sibling selector.
D.general sibling selector.
1. space
2. > 
3.+  
4. ~ 
||
*= A1 B2 C3 D4
* A1 B3 C2 D4
* A1 B3 C4 D2
* Not have correct answer


What are true
||CODE:css:
div p {//A
  background-color: yellow;
}
//B
div > p {
  background-color: yellow;
}
//C
div + p {
  background-color: yellow;
}
//D
div ~ p {
  background-color: yellow;
}
||
*=The descendant selector matches all elements that are descendants of a specified element.
*= A select all p element inside div element
*= The child selector selects all elements that are the children of a specified element.
* child selector is bigger than descendants :: My daughter is both my child and my descendant.My granddaughter is not my child, but she is my descendant.
* B selects all <p> elements that are inside of a <div> element. :: B selects all <p> elements that are children of a <div> element:
*= Sibling elements must have the same parent element, and "adjacent" means "immediately following".
*= C selects all <p> elements that are placed immediately after <div> elements
*= D selects all <p> elements that are siblings of <div> elements.
* C and D have the same effect. :: C just call the immediately sibling , D call all sibling

What are true
||CODE:css:
/* visited link */
a:visited {
  color: #00FF00;
}
//B
img {
  opacity: 0.5;
  filter: alpha(opacity=50); /* For IE8 and earlier */
}
img:hover {
  opacity: 1.0;
  filter: alpha(opacity=100); /* For IE8 and earlier */
}
//C
div {
  background-color: #4CAF50;
  padding: 10px;
}
div.first {
  opacity: 0.1;
  filter: alpha(opacity=10); /* For IE8 and earlier */
}
div.second {
  opacity: 0.3;
  filter: alpha(opacity=30); /* For IE8 and earlier */
}
div.third {
  opacity: 0.6;
  filter: alpha(opacity=60); /* For IE8 and earlier */
}
//D
#home {
  width: 46px;
  height: 44px;
  background: url(img_navsprites.gif) 0 0;
}
||
*= A pseudo-class is used to define a special state of an element. like hover,focus, like A
*= A CSS pseudo-element is used to style specified parts of an element. Eg: Style the first letter, or line, of an element.Insert content before, or after, the content of an element
* B is create hover effect when hover mouse over will fade image
*= C create a transparent box which element will be faded to the right
*= An image sprite is a collection of images put into a single image.
* Using image sprites won't reduce the number of server requests and save bandwidth :: Using image sprites will reduce the number of server requests and save bandwidth.
*= D load a sprite

What are true
||CODE:css:
//A
a[target] {
  background-color: yellow;
}
//B
a[target="_blank"] { 
  background-color: yellow;
}
//C
[title~="flower"] {
  border: 5px solid yellow;
}//D
[class|="top"] {
  background: yellow;
}
//E
[class^="top"] {
  background: yellow;
}
//F 
[class$="test"] {
  background: yellow;
}
//G
[class*="te"] {
  background: yellow;
}
//H 
input[type=text] {
  background-color: white;
  background-image: url('searchicon.png');
  background-position: 10px 10px; 
  background-repeat: no-repeat;
  padding-left: 40px;
}
//I 
input[type=text] {
  -webkit-transition: width 0.4s ease-in-out;
  transition: width 0.4s ease-in-out;
}
input[type=text]:focus {
  width: 100%;
}
||
*= A mean all a element will be styled if have attribute target.
* B mean all a element will be styled if have attribute target ::  selects all <a> elements with a target="_blank" attribute
*= C mean style all elements with a title attribute that contains a space-separated list of words, one of which is "flower"
* C will accept my-flower
* D wont accept class="top-text" :: selector is used to select elements with the specified attribute starting with the specified value. The following example selects all elements with a class attribute value that begins with "top". The value has to be a whole word, either alone, like class="top", or followed by a hyphen( - ), like class="top-text"! 
*= E  selects all elements with a class attribute value that begins with "top" :: The value does not have to be a whole word! 
*= F selects all elements with a class attribute value that ends with "test":: The value does not have to be a whole word!  
*= G selects all elements with a class attribute value that contains "te":: value does not have to be a whole word!  
*= H add a search icon to input
*= I add transition longer search value
*= CSS counters let you adjust the appearance of content based on its location in a document.  :: For example, you can use counters to automatically number the headings in a webpage. 

What are true?
||IMG: https://lh3.googleusercontent.com/qrk71g-MiZ2nGrCP8CGnnEJ5ufLilBKTRxZmJow055GbP5AvLGrYt0I6YbhJgdOxkifhtTZiIqqVwEm1vKRuP0mSHl4JV7JXB_fhHb9Lwe83_2YMOV9KbD8tDlqgKIUAqwV42CJ-Fyd7vNEW_M6rqAOSzJ1yLqbzCw4Ge8xX07gAymmFf3sk4c9cxrrFpXrGN5Kq6isd0PVC677bNX9rEFrlxOcvjkEC-ERBmR3g8aHcFHj9hEdT8NiVMdEmYgilMX3YH8E7y3t-2Zz8Sjo08JkBNVhJcQq9oAcgCGR3olUc2ybt13Yb8be5uBJjs-_by4zhjU_E5lIjpHNQSzLPnqvpkXdrXym2yBrBv6W1BDV-yLDnglEypQnrg34mjRGSNzbALO-1kzHu81RmUw3ypuyyKh5ywZB9ikkkvMyPBOdMoPAebwCFbkn4QlWTDvpPBgUqKcCG5Zme5KJbS87x9th79R-F2E4RogHlqoXbY2FqcidrjNxGAN8gf2-waC7T9pnDL1eOQjFE9qdfLKCKZ96eW5P2-k2nYdIZ-cKensLMCvJky8KO-y5eWEtDXF7nUIZ4VtoSJ6681TBK2DvWfVRJ3wM6_CTnbZB8keJzj2AvxA80eCjl9tMa3KO7j468zgmHwbEafx-kwQNsYld4VirFevRviGu0OT0dd1KcADs3SxXdfOpfk4c=w1295-h488-no||
||CODE:css:
//A
/* Create three equal columns that floats next to each other */
.column {
  float: left;
  width: 33.33%;
}
/* Clear floats after the columns */
.row:after {
  content: "";
  display: table;
  clear: both;
}
/* Responsive layout - makes the three columns stack on top of each other instead of next to each other on smaller screens (600px wide or less) */
@media screen and (max-width: 600px) {
  .column {
    width: 100%;
  }
}
//B 
.column {
  float: left;
}
/* Left and right column */
.column.side {
  width: 25%;
}
/* Middle column */
.column.middle {
  width: 50%;
}
/* Responsive layout - makes the three columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
  .column.side, .column.middle {
    width: 100%;
  }
}
||
* This is a tablet form :: 3-column layout (only used for desktops) 1-column (often used for mobile browsers) 2-column (often used for tablets and laptops)
*= A create 3 column and merge to 1 after detect screen < 600 :: To create a 2-column layout, change the width to 50%. To create a 4-column layout, use 25%, etc. A more modern way of creating column layouts, is to use CSS Flexbox. However, it is not supported in Internet Explorer 10 and earlier versions. If you require IE6-10 support, use floats (as shown above). 
* B create equal width column
*= The em and rem units are practical in creating perfectly scalable layout!
*= em Relative to the font-size of the element (2em means 2 times the size of the current font)
* rem Relative to the font-size of the recursive element :: Relative to font-size of the root element

What are true?
||CODE:text:
1.Inline styles - An inline style is attached directly to the element to be styled. Example: <h1 style="color: #ffffff;">.
2.IDs - An ID is a unique identifier for the page elements, such as #navbar.
3.Elements and pseudo-elements - This category includes element names and pseudo-elements, such as h1, div, :before and :after.
4.Classes, attributes and pseudo-classes - This category includes .classes, [attributes] and pseudo-classes such as :hover, :focus etc.
||
||CODE:css:
//A
#rcorners3 {
  border-radius: 25px;
  background: url(paper.gif);
  background-position: left top;
  background-repeat: repeat;
  padding: 20px; 
  width: 200px;
  height: 150px; 
}
//B 
#example1 {
  background-image: url(img_flwr.gif), url(paper.gif);
  background-position: right bottom, left top;
  background-repeat: no-repeat, repeat;
}
//C
html {
  background: url(img_man.jpg) no-repeat center fixed; 
  background-size: cover;
}
||
//D
#grad {
  background-image: linear-gradient(red, yellow);
}
//E
@font-face {
  font-family: myFirstFont;
  src: url(sansation_light.woff);
}
div {
  font-family: myFirstFont;
}
*=  Specificity is If there are two or more conflicting CSS rules that point to the same element, the browser follows some rules to determine which one is most specific and therefore wins out.
*= The correct load order is 1243
* The correct load order is 1234
* The correct load order is 1324
*= With the CSS border-radius property, you can give any element "rounded corners".
* A is a button Rounded corners for an element with a background image :: A not a button
*=  CSS border-image property, you can set an image to be used as the border around an element.
* CSS forbid you to add multiple background images for an element, through the background-image property. B will return an error :: CSS allows you to add multiple background images for an element, through the background-image property
*= C fill all background with image
* D create gradient from red to yellow left to right :: up -> down
* You can only create linear line gradient :: You can set angle, shape, repeat an gradient
* You can only create box shadow of an element :: and text shadow
*= CSS text effect let you control  overflowed content that is not displayed should be signaled to the user, Word Wrapping, Word Breaking, text are laid out horizontally or vertically
*= E define a custom font to use later.

What are true?
||CODE:css:
//A
div {
  -ms-transform: rotate(20deg); /* IE 9 */
  -webkit-transform: rotate(20deg); /* Safari prior 9.0 */
  transform: rotate(20deg); /* Standard syntax */
}
//B 
div {
  width: 100px;
  height: 100px;
  background: red;
  transition: width 2s;
}
//C 
div:hover {
  width: 300px;
}
//D
/* The animation code */
@keyframes example {
  from {background-color: red;}
  to {background-color: yellow;}
}
/* The element to apply the animation to */
div {
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
}
//D 
/* The animation code */
@keyframes example {
  0%   {background-color: red;}
  25%  {background-color: yellow;}
  50%  {background-color: blue;}
  100% {background-color: green;}
}
/* The element to apply the animation to */
div {
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
}
||
*= A define a  Transforms Methods on Some older browsers 
*= some transforms are translate(),rotate(),scaleX(),scaleY(),scale(),skewX(),skewY(),skew(),matrix()
*= To create a transition effect, you must specify two things: the CSS property you want to add an effect to,the duration of the effect like B when C trigger
* CSS forbid combination of transition and transform :: hell no yes CSS do allow
* An animation is CSS integrate GIF. :: An animation lets an element gradually change from one style to another.
*= Keyframes hold what styles the element will have at certain times like D
*= Keyframes accept percentage load like C

What are true?
||CODE:css:
//A
.tooltip .tooltiptext::after {
  content: " ";
  position: absolute;
  bottom: 100%;  
  left: 50%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: transparent transparent black transparent;
}
//B
img {
  max-width: 100%;
  height: auto;
}
//C
img {
  width: 200px;
  height: 400px;
  object-fit: cover;
}
||
*= A tooltip is often used to specify extra information about something when the user moves the mouse pointer over an element:
* A define a tooltip with arrow point to the bottom :: /* At the top of the tooltip */
* B mean image always fit 100% viewport ::  image to scale down if it has to, but never scale up to be larger than its original size
* We can't create image hover overlay :: ||LINK:https://www.w3schools.com/css/tryit.asp?filename=trycss_css_image_overlay_fade||
*= CSS can be used single hand to create image galleries :: ||LINK:https://www.w3schools.com/css/tryit.asp?filename=trycss_image_gallery_responsive||
*= The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container. like C

What are true?
||CODE:css:
.button { //A
  background-color: #4CAF50; /* Green */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
}
||
*= A is to style a button 
*= CSS can be use to create disabled button, Shadow Buttons, Button Groups.
* Css cannot create animated button alone without javascript. :: wrong, can create arrow on hover, Fade in on hover, press on clicked, ripple
*= If you have a website with lots of pages, you may wish to add some sort of pagination to each page :: pagination support Active and Hoverable Pagination, Transition Effect
* Breadcrumbs is a deprecated feature of css :: Another variation of pagination is so-called "breadcrumbs" ||LINK:https://www.w3schools.com/css/tryit.asp?filename=trycss_breadcrumbs||

What are true?
||CODE:css:
div { //A
  resize: horizontal;
  overflow: auto;
}
:root { //B
  --main-bg-color: coral;
}
#div1 {
  background-color: var(--main-bg-color);
}
#div2 {
  background-color: var(--main-bg-color);
}
//C
\* {
  box-sizing: border-box;
}
||
*= The CSS multi-column layout allows easy definition of multiple columns of text - just like in newspapers:
*= The column-count property specifies the number of columns an element should be divided into.
* The column-rule property is a shorthand property sets the  style, width and color :: sets the width, style, and color of the rule between columns:
*= The resize property specifies if (and how) an element should be resizable by the user.
* A mean allow user resize vertically.
* In many browsers, <textarea> is not resizable by default.
*= The outline-offset property adds space between an outline and the edge or border of an element.
* Outline are borders! :: Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content.
*=The var() function can be used to insert the value of a custom property like B 
*= The CSS box-sizing property allows us to include the padding and border in an element's total width and height. :: When you set the width/height of an element, the element often appears bigger than you have set (because the element's border and padding are added to the element's specified width/height).
* C is a bad global practice :: div size will be different if you dont have this

what are true
||CODE:css:
//A
<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div>3</div>
</div>
||
*= A defined a flex container
* A Flexible Layout not require a parent element with the display property set to flex. :: A Flexible Layout must have a parent element with the display property set to flex.
*= we can set flex direction, order, justify content
* flex cannot wrap
*=  flex-flow property is a shorthand property for the flex-direction and the flex-wrap properties.
* flex cannot align content at the begin or end 
*= flex can  align the flex items or stretch
*= flex can adjust space around or stretch
*= flex can be put at start or end of container
* all child elements of a flex container automatically becomes flexible (flex) items :: The direct child elements of a flex container automatically becomes flexible (flex) items
*= we can adjust flex item order, glow or shrink relative
*= flex-basis property specifies the initial length of a flex item
*= flex align-self  Overrides the container's align-items property


what are true
||CODE:css:
@media screen and (min-width: 480px) {
  body {
    background-color: lightgreen;
  }
}
//B
/* Container for flexboxes */
.row {
  display: flex;
  flex-wrap: wrap;
}
/* Create four equal columns */
.column {
  flex: 25%;
  padding: 20px;
}
/* On screens that are 992px wide or less, go from four columns to two columns */
@media screen and (max-width: 992px) {
  .column {
    flex: 50%;
  }
}
/* On screens that are 600px wide or less, make the columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
  .row {
    flex-direction: column;
  }
}
//C
/* Container for flexboxes */
.row {
  display: flex;
  flex-wrap: wrap;
}
/* Create four equal columns */
.column {
  flex: 25%;
  padding: 20px;
}
/* On screens that are 992px wide or less, go from four columns to two columns */
@media screen and (max-width: 992px) {
  .column {
    flex: 50%;
  }
}
/* On screens that are 600px wide or less, make the columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
  .row {
    flex-direction: column;
  }
}
//D
<meta name="viewport" content="width=device-width, initial-scale=1.0">
//E
/* Extra small devices (phones, 600px and down) */
@media only screen and (max-width: 600px) {...}
/* Small devices (portrait tablets and large phones, 600px and up) */
@media only screen and (min-width: 600px) {...}
/* Medium devices (landscape tablets, 768px and up) */
@media only screen and (min-width: 768px) {...}
/* Large devices (laptops/desktops, 992px and up) */
@media only screen and (min-width: 992px) {...}
/* Extra large devices (large laptops and desktops, 1200px and up) */
@media only screen and (min-width: 1200px) {...}
||
*= media query by width only available on css 3
*= B and C are how to Responsive width, C are recommended
* css cannot detect orientation :: wrong 
*= HTML5 introduced a method to let web designers take control over the viewport, through the <meta> tag.
*= A responsive grid-view often has 12 columns, and has a total width of 100%, and will shrink and expand as you resize the browser window.
*= always designing for desktop first::Mobile First means designing for mobile before designing for desktop or any other device (This will make the page display faster on smaller devices).
*= E is breakpoint for target device
*= You can use the media query min-device-width, instead of min-width, which checks the device width, instead of the browser width. Then the image will not change when you resize the browser window
*= HTML5 introduced the <picture> element, which lets you define more than one image.
*If the width property is set to 100%, the video player will scale down if it has to, but never scale up to be larger than its original size: ::If the max-width property is set to 100%, the video player will scale down if it has to, but never scale up to be larger than its original size
